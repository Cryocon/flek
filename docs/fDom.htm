<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>fDom</title>
  </head>
  <body bgcolor="white">
    <center>
      <img src="flek.gif">
      <h4>The Fast Light Environment Kit</h4>
    </center>
    <hr>
    
    <h2>fDom</h2>
    <p>fDom is the Flek document component object model.  fDom provides a logical 
      structure and API for accessing and manipulating documents and
      component building blocks.  The term 
      "document" is used in a very broad sense.  A document may be 
      comprised of any sort of information or data.
    <p>fDom attempts to synthesize ideas and features of 
      several existing frameworks such as the W3's 
      <a href="http://www.w3.org/DOM/">DOM</a> / XML, and IBM's 
      <a href="http://www-4.ibm.com/software/ad/opendoc/">OpenDoc</a>. 
      fDom is most similar to DOM, except that it provides fewer structural 
      primitives and allows the programmer more freedom in subclassing nodes.  
      fDom emphasizes nodes as being connected to abstract "parts" and in
      this respect it is more similar to OpenDoc.
    <p>fDom is also <i>incomplete</i>!  The implementation still lacks a mechanism 
      to allow for remote method invocation, and Flek / Fltk currently
      lack the functionality necessary to embed "remote parts".  Parts may
      be plugins, though.
    <h3>Data Structures</h3>
    <blockquote>
    <ol>
      <li>fDomAttribute</li>
      <li>fDomListener</li>
      <li>fDomNode
	<ul>
	  <li>fDomTextNode</li>
	  <li>fDomDynamicNode</li>
	</ul>
      </li>
      <li>fDomPart</li>
    </ol>
      <h4>fDomNode</h4>
      <blockquote>
      <p>The primary currency of information within fDom is the node.
	Nodes exist as entities in a hierarchical tree.  A single node
	may have a parent node, multiple daughter nodes, a set of
	attributes, and a set of connected listeners.  A node without
	a parent is the document root.
      <p>The <b>fDomTextNode</b> subclass is a special node that 
	represents a block of text.
      <p>The <b>fDomDynamicNode</b> is a subclass whose name is dynamic.
	In some applications the programmer may not want to define
	fDom classes for every element she intends to use.  These abstract
	elements may be represented by an fDomDynamicNode.  In most
	applications where a well defined document is desirable, using
	fDomDynamicNode is <b>not</b> desireable.
      </blockquote>
      <h4>fDomAttribute</h4>
      <blockquote>
      <p>Certain kinds of information associated with a single node
	may be expressed in key-value pairs called "attributes".  When
	stored in XML format these become the attributes for a given
	tag.
      </blockquote>
      <h4>fDomListener</h4>
      <blockquote>
	<p>Listeners can be connected to individual nodes and will "listen"
	  for events.  Listeners are usually used to communicate events from
	  an fDomNode subclass to an fDomPart.
      </blockquote>
      <h4>fDomPart</h4>
      <blockquote>
      <p>fDomListeners are usually part of an fDomPart.  A "part" is
	an abstract operator that performs some function or set of
	services on a particular class of fDomNode.  One could define
	an fDomDateNode that stores date information and then build an
	fDomDatePart that could edit that information.  The node
	interface and the part interface "plug" together.
      </blockquote>
    </blockquote>
    <h3>Connecting Nodes to Parts</h3>
    <blockquote>
    <p>A part can communicate with a node directly because it knows
      what that node's interface looks like.  For instance, a date 
      part could set a date node to the year 2000 by calling it's 
      setYear method.  But a node can not communicate directly 
      with a part because that would be implementation specific --
      a part can implement it's interface anyway it likes.
    <p>Listeners are like callback functions for the document.  When
      document events occur listeners communicate the event from the
	node to the parts.  In this way the document has no knowledge 
      what part or parts are actually connected to it.
    </blockquote>
    <h3>Storing the Document (XML)</h3>
    <blockquote>
      fDom also provides a mechanism to save and load documents
      through an XML format.  fDom documents aim to be 
      <a href="http://www.w3.org/TR/1998/REC-xml-19980210#dt-wellformed">well-formed</a>
      but are not necessarily <a href="http://www.w3.org/TR/1998/REC-xml-19980210#dt-valid">valid</a>.
      fDom doesn't currently have a validation mechanism.
    </blockquote>
    <hr>
    <address><a href="mailto:jpalmer@agstream.tamu.edu">James Dean Palmer</a></address>
<!-- Created: Fri Feb 18 12:51:28 CST 2000 -->
<!-- hhmts start -->
Last modified: Fri Feb 18 22:43:48 CST 2000
<!-- hhmts end -->
  </body>
</html>
